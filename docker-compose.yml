#
# Copyright (C) 2015 The Gravitee team (http://gravitee.io)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
version: "3.5"

networks:
  nginx:
    name: nginx
  frontend:
    name: frontend
  storage:
    name: storage
  catalog:
    name: catalog
  ui:
    name: ui

services:
  mongodb:
    image: mongo:${MONGODB_VERSION:-6.0}
    container_name: gio_apim_mongodb
    restart: always
    volumes:
      - ./gravitee/mongodb/data:/data/db
    networks:
      - storage

  elasticsearch-apim:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION:-8.8.1}
    container_name: gio_apim_elasticsearch
    restart: always
    volumes:
      - ./gravitee/elasticsearch/data:/usr/share/elasticsearch/data
    environment:
      - http.host=0.0.0.0
      - transport.host=0.0.0.0
      - xpack.security.enabled=false
      - cluster.name=elasticsearch
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile: 65536
    networks:
      - storage

  gateway:
    image: graviteeio/apim-gateway:${APIM_VERSION:-4}
    container_name: gio_apim_gateway
    restart: always
    ports:
      - "8082:8082"
    depends_on:
      - mongodb
      - elasticsearch-apim
    volumes:
      - ./gravitee/apim-gateway/logs:/opt/graviteeio-gateway/logs
      - ./gravitee/apim-gateway/plugins:/opt/graviteeio-gateway/plugins-ext
    environment:
      - gravitee_management_mongodb_uri=mongodb://mongodb:27017/gravitee?serverSelectionTimeoutMS=5000&connectTimeoutMS=5000&socketTimeoutMS=5000
      - gravitee_ratelimit_mongodb_uri=mongodb://mongodb:27017/gravitee?serverSelectionTimeoutMS=5000&connectTimeoutMS=5000&socketTimeoutMS=5000
      - gravitee_reporters_elasticsearch_endpoints_0=http://elasticsearch-apim:9200
      - gravitee_plugins_path_0=/opt/graviteeio-gateway/plugins
      - gravitee_plugins_path_1=/opt/graviteeio-gateway/plugins-ext
    networks:
      - storage
      - frontend
      - nginx
      - ui

  management_api:
    image: graviteeio/apim-management-api:${APIM_VERSION:-4}
    container_name: gio_apim_management_api
    restart: always
    ports:
      - "8083:8083"
    depends_on:
      - mongodb
      - elasticsearch-apim
    volumes:
      - ./gravitee/apim-management-api/logs:/opt/graviteeio-management-api/logs
      - ./gravitee/apim-management-api/plugins:/opt/graviteeio-management-api/plugins-ext
      - ./gravitee-config/gravitee.yml:/opt/graviteeio-management-api/config/gravitee.yml
    environment:
      - gravitee_management_mongodb_uri=mongodb://mongodb:27017/gravitee?serverSelectionTimeoutMS=5000&connectTimeoutMS=5000&socketTimeoutMS=5000
      - gravitee_analytics_elasticsearch_endpoints_0=http://elasticsearch-apim:9200
      - gravitee_plugins_path_0=/opt/graviteeio-management-api/plugins
      - gravitee_plugins_path_1=/opt/graviteeio-management-api/plugins-ext
    networks:
      - storage
      - frontend
      - nginx

  management_ui:
    image: graviteeio/apim-management-ui:${APIM_VERSION:-4}
    container_name: gio_apim_management_ui
    restart: always
    ports:
      - "8084:8080"
    depends_on:
      - management_api
    environment:
      - MGMT_API_URL=${GRAVITEE_API_BASE_URL}/management/organizations/DEFAULT/environments/DEFAULT/
    volumes:
      - ./gravitee/apim-management-ui/logs:/var/log/nginx
    networks:
      - frontend
      - nginx

  portal_ui:
    image: graviteeio/apim-portal-ui:${APIM_VERSION:-4}
    container_name: gio_apim_portal_ui
    restart: always
    ports:
      - "8085:8080"
    depends_on:
      - management_api
    environment:
      - PORTAL_API_URL=${GRAVITEE_API_BASE_URL}/portal/environments/DEFAULT
    volumes:
      - ./gravitee/apim-portal-ui/logs:/var/log/nginx
    networks:
      - frontend
      - nginx

  keycloak:
    image: jboss/keycloak:${KEYCLOAK_VERSION:-13.0.0}
    environment:
      KEYCLOAK_USER: ${KEYCLOAK_ADMIN}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      PROXY_ADDRESS_FORWARDING: "true"
      KEYCLOAK_IMPORT: /tmp/realm-gio.json
      JAVA_OPTS_APPEND: "-Dkeycloak.profile.feature.upload_scripts=enabled"
      DB_ADDR: postgres
      DB_VENDOR: postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: ${KC_DB_PASSWORD}
    restart: always
    expose:
      - 8080
    ports:
      - "8890:8080"
    volumes:
      - ./keycloak-realm-definitions/realm-gio.json:/tmp/realm-gio.json
    networks:
      - frontend
      - storage
      - nginx

  postgres:
    image: postgres:${POSTGRESQL_VERSION}
    volumes:
      - ./keycloak/postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: ${POSTGRESQL_USER}
      POSTGRES_PASSWORD: ${POSTGRESQL_PASS}
    healthcheck:
      test: "exit 0"
    ports:
      - "5456:5432"
    networks:
      - storage

  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: elasticsearch
    restart: always
    volumes:
      - ./elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    networks:
      - catalog
      - storage

  catalog:
    build:
      context: ./rodeo-poc-wis2-gdc
    command: tail -F anything
    container_name: catalog
    volumes:
      - "./metadata-files:/metadata-files"
    environment:
      - WIS2_GDC_API_URL=http://localhost:5000
      - WIS2_GDC_BACKEND=Elasticsearch
      - WIS2_GDC_CONNECTION=http://elasticsearch:9200/wis2-discovery-metadata
      - WIS2_GDC_COLLECTION_INDEX=metadata_collection
      - EWC_URL=${EWC_URL}
      - AWS_URL=${AWS_URL}
    networks:
      - catalog

  apimanager:
    build:
      context: ./api-manager-demo
    container_name: apimanager
    depends_on:
      - elasticsearch
    ports:
      - "5000:5000"
    environment:
      - BASE_URL=${APIMANAGER_BASE_URL}
      - ELASTICSEARCH_URL=http://gateway:8082
      - ELASTICSEARCH_TOKEN=${ELASTICSEARCH_TOKEN}
    networks:
      - storage

  catalog_ui:
    build:
      context: ./catalog-ui
      dockerfile: Dockerfile
      args:
        - ELASTICSEARCH_URL=http://elasticsearch:9200
    container_name: catalog_ui
    depends_on:
      - elasticsearch
    ports:
      - "3000:3000"
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    networks:
      - catalog
      - ui

  nginx:
    image: nginx:alpine
    container_name: nginx_container
    hostname: auth.localhost
    depends_on:
      - management_ui
      - keycloak
    ports:
      - 80:80
    networks:
      - nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
